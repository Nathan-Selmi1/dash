# This Vagrantfile uses a windows image that we cannot distribute, sorry
# You can build it yourself using packer though
# https://github.com/ccdc-opensource/packer-ccdc-basebox-windows-server-2019

# If you do, please comment out this section
variables = %w{ARTIFACTORY_API_KEY ATLAS_TOKEN VAGRANT_SERVER_URL}
missing = variables.find_all { |v| ENV[v] == nil }
unless missing.empty?
  puts "FATAL: The following environment variables are missing and are needed to run this script: #{missing.join(', ')}."
  puts "See https://ccdc-cambridge.atlassian.net/l/c/gbSuHnXB for instructions on obtaining an artifactory API key and atlas token"
  puts "Make sure export VAGRANT_SERVER_URL='https://artifactory.ccdc.cam.ac.uk/artifactory/api/vagrant/ccdc-vagrant-repo' is present in your .bashrc"
  exit
end

current_dir = File.dirname(File.expand_path(__FILE__))

Vagrant.configure("2") do |config|
  config.vm.hostname = "dash-development-windows-2019"
  config.vm.define "dash-development-windows-2019"
  config.vm.box = "ccdc-basebox/windows-2019"

  # Workaround for bug in artifactory not handling / in package names
  config.vm.box_url = "https://artifactory.ccdc.cam.ac.uk/artifactory/api/vagrant/ccdc-vagrant-repo/ccdc-basebox%2Fwindows-2019"
  config.vm.synced_folder "../../../", "/dash-code"

  config.vm.provider :virtualbox do |vb|
    vb.gui = true
    vb.name = "dash-development-windows-2019"
  
    # Use VBoxManage to customize the VM. For example to change memory:
    vb.customize ["modifyvm", :id, "--cpus", "4"]
    vb.customize ["modifyvm", :id, "--memory", "8182"]
    vb.customize ["modifyvm", :id, "--vram", "128"]
  end
  config.vm.provider :vmware_fusion do |v, override|
    v.gui = true
    v.vmx["memsize"] = "8192"
    v.vmx["numvcpus"] = "4"
    v.vmx["mks.enable3d"] = "TRUE"
  end
  # For some reason vagrant is not picking this up from the base template
  config.winrm.ssl_peer_verification = false
  # Temporary workaround to Python bug in macOS High Sierra which can break Ansible
  # https://github.com/ansible/ansible/issues/34056#issuecomment-352862252
  # This is an ugly hack tightly bound to the internals of Vagrant.Util.Subprocess, specifically
  # the jailbreak method, self-described as "quite possibly, the saddest function in all of Vagrant."
  # That in turn makes this assignment the saddest line in all of Vagrantfiles.
  ENV["VAGRANT_OLD_ENV_OBJC_DISABLE_INITIALIZE_FORK_SAFETY"] = "YES"


  config.vm.provision "shell" do |s|
    ssh_prv_key = ""
    ssh_pub_key = ""
    if File.file?("#{Dir.home}/.ssh/id_rsa")
        ssh_prv_key = File.read("#{Dir.home}/.ssh/id_rsa")
        ssh_pub_key = File.readlines("#{Dir.home}/.ssh/id_rsa.pub").first.strip
    else
        puts "No SSH key found. You will need to remedy this before pushing to the repository."
    end
    s.inline = <<-SHELL
Write-Host "SSH key provisioning."
New-Item -Path "C:\\Users\\vagrant" -Name ".ssh" -ItemType "directory" -Force
New-Item -Path "C:\\Users\\vagrant\\.ssh" -Name "authorized_keys" -ItemType "File" -Force
Set-Content -Path "C:\\Users\\vagrant\\.ssh\\authorized_keys" -Value "#{ssh_pub_key}"
New-Item -Path "C:\\Users\\vagrant\\.ssh" -Name "id_rsa.pub" -ItemType "File" -Force
Set-Content -Path "C:\\Users\\vagrant\\.ssh\\id_rsa.pub" -Value "#{ssh_pub_key}"
New-Item -Path "C:\\Users\\vagrant\\.ssh" -Name "id_rsa" -ItemType "File" -Force
Set-Content -Path "C:\\Users\\vagrant\\.ssh\\id_rsa" -Value "#{ssh_prv_key}"
Icacls "C:\\Users\\vagrant\\.ssh\\id_rsa" /c /t /Inheritance:d
Icacls "C:\\Users\\vagrant\\.ssh\\id_rsa" /c /t /Grant vagrant:F
Icacls "C:\\Users\\vagrant\\.ssh\\id_rsa" /c /t /Remove Administrator "Authenticated Users" BUILTIN\\Administrators BUILTIN Everyone System Users
    SHELL
  end

  config.vm.provision "shell", path: "../../scripts/windows-add-dotnet.ps1"
  config.vm.provision "shell", path: "../../scripts/windows-add-chocolatey.ps1"
  config.vm.provision "shell", path: "../../scripts/windows-install-development-packages.ps1"
  if ENV['ARTIFACTORY_API_KEY']
    config.vm.provision "shell", path: "../../scripts/windows-fetch-winteracter-ccdc-private.ps1", args: ["-ApiKey", ENV['ARTIFACTORY_API_KEY']]
  end
  
  config.vm.provision "shell" do |s|
    git_username = `git config --get user.name`.strip
    git_email = `git config --get user.email`.strip
    s.inline = <<-SHELL
    git config --global user.name "#{git_username}"
    git config --global user.email "#{git_email}"
    SHELL
  end

  config.vm.provision "shell", path: "../../scripts/windows-install-intel-compiler.ps1"
end
