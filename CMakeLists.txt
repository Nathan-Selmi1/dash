# Minimum required content of a CMakeLists.txt file
cmake_minimum_required(VERSION 3.19...3.21)

project(DASH
  VERSION
      3.99.1
  DESCRIPTION
    "DASH powder diffraction solution"
  LANGUAGES
    Fortran
)

include(FetchContent)
include(GNUInstallDirs)

# Set up variables that will be replaced in source files
set(DASH_VERSION ${CMAKE_PROJECT_VERSION})
set(DASH_COPYRIGHT_YEAR "2021")

# Configure CPack based package generation
set(CPACK_PACKAGE_NAME "dash")
set(CPACK_PACKAGE_VENDOR "The Cambridge Crystallographic Data Centre")
set(CPACK_PACKAGE_DESCRIPTION_FILE "${CMAKE_CURRENT_SOURCE_DIR}/description.txt")
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY "A versatile and interactive package for solving crystal structures from powder diffraction data")
set(CPACK_PACKAGE_HOMEPAGE_URL "https://github.org/ccdc-opensource/dash")
if($ENV{BUILD_NUMBER})
    set(CPACK_PACKAGE_FILE_NAME ${CPACK_PACKAGE_NAME}-${DASH_VERSION}-$ENV{BUILD_NUMBER}-win32)
    set(CPACK_SOURCE_PACKAGE_FILE_NAME ${CPACK_PACKAGE_NAME}-${DASH_VERSION}-$ENV{BUILD_NUMBER})
else()
    set(CPACK_PACKAGE_FILE_NAME ${CPACK_PACKAGE_NAME}-${DASH_VERSION}-developer-build-win32)
    set(CPACK_SOURCE_PACKAGE_FILE_NAME ${CPACK_PACKAGE_NAME}-${DASH_VERSION}-developer-build)
endif()
# set(CPACK_PACKAGE_INSTALL_DIRECTORY "")
set(CPACK_PACKAGE_ICON icons/dash_128x128.png)
set(CPACK_PACKAGE_CHECKSUM SHA256)
# set(CPACK_RESOURCE_FILE_LICENSE LICENSE)
# set(CPACK_RESOURCE_FILE_README )
# set(CPACK_RESOURCE_FILE_WELCOME)
set(CPACK_MONOLITHIC_INSTALL TRUE)
set(CPACK_PACKAGE_EXECUTABLES dash;DASH)
set(CPACK_VERBATIM_VARIABLES TRUE)
set(CPACK_GENERATOR "7Z")


include(CPack)

# Transform variables in .in files into their values (output goes to the build directory)
configure_file("${CMAKE_CURRENT_SOURCE_DIR}/src/PCDash_Main.f90.in" "${CMAKE_CURRENT_BINARY_DIR}/src/PCDash_Main.f90" @ONLY)
configure_file("${CMAKE_CURRENT_SOURCE_DIR}/src/variables.f90.in" "${CMAKE_CURRENT_BINARY_DIR}/src/variables.f90" @ONLY)

# A temporary path for winteracter 9.2
FetchContent_Declare(
  winteracter
  URL      "https://artifactory.ccdc.cam.ac.uk/artifactory/ccdc-legacy-windows-distributions/winteracter-9.2.7z"
  URL_HASH "SHA256=6c13d4e9b343e258630d879ff91f2d2d463ebe87d53d4224516e087197c2bf04"
  HTTP_HEADER "X-JFrog-Art-Api:$ENV{ARTIFACTORY_API_KEY}"
)
FetchContent_MakeAvailable(winteracter)

# Create the DASH executable target
add_executable(DASH WIN32)

target_include_directories(
  DASH
  PRIVATE
  ${winteracter_SOURCE_DIR}/include
  ${winteracter_SOURCE_DIR}/lib.if8
  ${CMAKE_CURRENT_SOURCE_DIR}/src
  ${CMAKE_CURRENT_SOURCE_DIR}
)
target_link_directories(DASH PRIVATE ${winteracter_SOURCE_DIR}/lib.if8)

# DASH was built with /QxW, which has been superseded by /arch switches
target_compile_options(DASH PRIVATE "/arch:SSE2")

target_link_libraries(
  DASH PRIVATE 
  winter.lib # Winteracter main library
  htmlhelp.lib # Used by some parts of Winteracter
)

target_sources(
  DASH PRIVATE
  # autogenerated files
  "${CMAKE_CURRENT_BINARY_DIR}/src/PCDash_Main.f90"
  "${CMAKE_CURRENT_BINARY_DIR}/src/variables.f90"
  # Main fortran files
  src/Align.f90
  src/ATMVAR.f90
  src/Basic_Date.f90
  src/Basic_Files.f90
  src/Basic_IO.f90
  src/Basic_Strings.f90
  src/Basic_Vectors.f90
  src/BatchMode.f90
  src/Ccslmain.f90
  src/Chi_sq_plot.F90
  src/create_fob.f90
  src/Declarations.f90
  src/Dialog_Routines.f90
  src/DICVAR.f90
  src/DICVO2.f90
  src/DICVO3.f90
  src/DICVO4.f90
  src/DICVO5.f90
  src/DICVO6.f90
  src/DICVO7.f90
  src/DICVOL91.f90
  src/error_message.f90
  src/Eval.f90
  src/External_RR.f90
  src/Fcn.f90
  src/Ffcalc.f90
  src/Fortic.f90
  src/forty.f90
  src/Fou.f90
  src/Frac2cart.f90
  src/FWHM.f90
  src/Generate_TicMarks.f90
  src/get_logref.f90
  src/GSAS.f90
  src/Init_Routines.f90
  src/Initialisation.f90
  src/Interface.f90
  src/LoadRAWFiles.f90
  src/LoadSDI.f90
  src/Mag.f90
  src/Main_Field_Changed_Routines.f90
  src/MCBack.f90
  src/MDB.f90
  src/Mogul.f90
  src/MONKEY1.F90
  src/MultiModal.f90
  src/multipeak_chisq.f90
  src/multipeak_fitter.f90
  src/MultiRun.f90
  src/Mvec.f90
  src/pawley_error_check.f90
  src/Pawley.f90
  src/PCDruid_Resource.F90
  src/PF_Simplex.f90
  src/Pf.f90
  src/plot_test.F90
  src/PO_VAR.f90
  src/PolyFitter_Subs.f90
  src/PolyLoadFiles.f90
  src/Pr.f90
  src/PRJVAR.f90
  src/Profile_Plot.f90
  src/ProjectSave.f90
  src/read_one_zm.f90
  src/REFVAR.f90
  src/Res2Mol2.f90
  src/RIETAN.f90
  src/Rietveld.f90
  src/RR_simopt.f90
  src/RRVAR.f90
  src/SA_Begin.f90
  src/SA_Defaults.f90
  src/SA_Dialogues.f90
  src/SA_main.f90
  src/SA_move_status.f90
  src/SA_output.f90
  src/SA_refresh.f90
  src/SA_restrain.f90
  src/SA_simopt.f90
  src/SA_soln_store.f90
  src/SA_structure_output.f90
  src/SA_subs.f90
  src/SA_summary.f90
  src/samabo.f90
  src/SAMVAR.f90
  src/SGDecode.f90
  src/SingleCrystal.f90
  src/SOLVAR.f90
  src/SpaceGroupDetermination.f90
  src/TAVAR.f90
  src/Tests.f90
  src/TOPAS.f90
  src/Tutorials.f90
  src/Upload_Cell_Constants.f90
  src/Upload_Widths.f90
  src/UserInputChecks.f90
  src/Utilities.f90
  src/Valchi.f90
  src/valchipro.f90
  src/Vicar.f90
  src/Wifd99.f90
  src/Wizard_routines.f90
  src/XtalFile.f90
  src/ZMVAR.f90

  # includes
  src/GLBVAR.INC
  src/Lattice.inc
  src/params.inc
  src/POLY_COLOURS.INC
  src/Reflns.inc
  src/SA_restrain.inc
  src/statlog.inc

  SGinc/ffcalctop.inc

  # Resources
  src/PCDruid_resource.RC
)

# Installation section
# Everything here is installed relative to the value of CMAKE_INSTALL_PREFIX (this is CMake's default behaviour)
install(
    TARGETS  DASH
    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
)

# Fetch current version of dash_requirements distribution from artifactory
# This requires that developers set up their ARTIFACTORY_API_KEY environment variable correctly
if(NOT DEFINED ENV{ARTIFACTORY_API_KEY})
    message(FATAL_ERROR "ARTIFACTORY_API_KEY environment variable is not defined, cannot download dash_requirements distribution files. See https://confluence.ccdc.cam.ac.uk/x/oK7I for info.")
endif()

# Specify a build of dash_requirements. This part can become more complex later, downloading the latest version from a branch perhaps
set(DASH_REQUIREMENTS_BUILD "316732")
set(DASH_REQUIREMENTS_BRANCH "main")
set(DASH_REQUIREMENTS_SHA256 "f30832ea6f7e483ecadf657f5196ea378b403dbb116f4eafa028027644dde9f7")

# While DASH can be built in 32bit mode, nothing stops us from starting 64bit executables
set(DASH_REQUIREMENTS_PLATFORM "windows-dynamic-64")

FetchContent_Declare(
  dash_requirements
  URL      "https://artifactory.ccdc.cam.ac.uk/artifactory/ccdc-cpp-main-builds/${DASH_REQUIREMENTS_PLATFORM}/distribution/dash_requirements/dash_requirements-${DASH_REQUIREMENTS_BUILD}-${DASH_REQUIREMENTS_BRANCH}-${DASH_REQUIREMENTS_PLATFORM}.7z"
  URL_HASH "SHA256=${DASH_REQUIREMENTS_SHA256}"
  HTTP_HEADER "X-JFrog-Art-Api:$ENV{ARTIFACTORY_API_KEY}"
)
FetchContent_MakeAvailable(dash_requirements)

install(
    DIRECTORY   "${dash_requirements_SOURCE_DIR}/"
    DESTINATION ${CMAKE_INSTALL_BINDIR}/zmconv
)

FetchContent_Declare(
  extinction_symbol_exe
  URL      "https://github.com/ccdc-opensource/dash/releases/download/extinction_symbol_2009/ExtinctionSymbol.exe"
  URL_HASH "SHA256=399353ca13a35f40c898973a1e19ebe7ce12642f2e672a485c731d0f42c6bb16"
  DOWNLOAD_NO_EXTRACT YES
)
FetchContent_MakeAvailable(extinction_symbol_exe)

install(
    DIRECTORY   "${extinction_symbol_exe_SOURCE_DIR}/"
    DESTINATION ${CMAKE_INSTALL_BINDIR}
)

install(
    FILES       distribution/bin/RIETAN.cmd
    DESTINATION ${CMAKE_INSTALL_BINDIR}
)

install(
    DIRECTORY   expcli
    DESTINATION ${CMAKE_INSTALL_BINDIR}
    COMPONENT
)

install(
    DIRECTORY   distribution/share/doc/
    DESTINATION ${CMAKE_INSTALL_DOCDIR}
)

install(
    DIRECTORY  distribution/share/icons
    DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}
)

install(
    DIRECTORY  distribution/share/dash
    DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}
)

# Install required intel fortran DLLs.
# InstallRequiredSystemLibraries currently has difficulties with our legacy fortran compiler
set(INTEL_FORTRAN_COMMON_FILES "C:/Program Files (x86)/Common Files/Intel/Shared Libraries/redist/ia32_win/compiler")
install(
    FILES
    "${INTEL_FORTRAN_COMMON_FILES}/libifcoremd.dll"
    "${INTEL_FORTRAN_COMMON_FILES}/libmmd.dll"
    "${INTEL_FORTRAN_COMMON_FILES}/svml_dispmd.dll"
    DESTINATION ${CMAKE_INSTALL_BINDIR}
    COMPONENT
)
